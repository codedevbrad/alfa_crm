generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ServiceKey {
  id        String   @id @default(cuid())
  user      User     @relation("UserServiceKeys", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  service   String
  keys      Json
  metadata  Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, service])
  @@map("service_keys")
  @@index([userId])
}

enum UserRole {
  ADMIN
  WORKER
  MANAGER
  NOTASSIGNED
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?

  role          UserRole       @default(NOTASSIGNED)

  accounts      Account[]
  sessions      Session[]
  serviceKeys   ServiceKey[]   @relation("UserServiceKeys")

  adminProfile  AdminProfile?
  workerProfile WorkerProfile?

  // (Optional, but handy)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([role])
  @@index([createdAt])
}

model WorkerProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdminProfile {
  id          String    @id @default(cuid())
  userId      String    @unique
  permissions String[]  @default([]) // default empty list

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum LeadStatus {
  NEW
  QUOTED
  WON
  IN_PROGRESS
  COMPLETED
  LOST
}

model Lead {
  id        String      @id @default(cuid())
  name      String
  company   String?
  email     String?
  phone     String?

  service   String?
  amount    Decimal?    @db.Decimal(12, 2)
  source    String?
  status    LeadStatus  @default(NEW)

  notes     String?

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([status])
  @@index([service])
  @@index([createdAt])
  @@index([email])
  @@index([phone])
}